## Inheritance

If you want the fns in parent contract to be customised in the child contract,
then declare that function as "virtual"
And in the child contract declare copy those function and declare it as "override"

A function can have both virtual and override declaration if it has to be 
inherited further down for customising

## Multiple Inheritance

Order of Inheritance will be most base like to derived

eg:

    x
  / |
 y  |
  \ |
    Z
    order of inheritance - x, y, z
   1 - (z inherits from both x and y, y inherits from x, but x inherits from ntg)
   2 - (y inherits from x only but z inherits from both x and y)

    x
  /   \
 y     A
 |     |
 |     B
  \   /
    z

    order of inheritance - x, y, A, B, z (y and A can be interchanged)

contract Z is X, Y { // order is important or else wont compile - most base like to derived
    function foo() public pure override(X, Y) returns(string memory) { // since the same fn is inherited from multiple ctrt
        return "Z";
    }

    function bar() public pure override(Y, X) returns(string memory) { // order don't matter
        return "Z";
    }
}

## Calling parent constructor inside (multiple)inherited contract

// order of execution - The order in which the constructor is called inside the function doesn't matter
// S
// T
// U

1. contract U is S("s"), T("t") {  // If we know the constructor input value - static input
    
}

2. contract V is S, T { 
    constructor(string memory _text, string memory _name) S(_text) T(_name) {// Dynamically passing input values

    }
}

3. contract W is S("s"), T {
    constructor(string memory _name) T(_name) { // combination of static and dynamic

    }
}

The order of initializition of the parent constructor is determined by the order of contracts inherited

## Calling parent functions
- directly - directly calls and executes the defined parent contract
- super - calls all the parent contract(multiple inheritance) and executed all of their inherited functions

(refer - CallParentFns.sol)

## Visibiility 
It defines how a contract or other contract have access to state variables and functions

- Private - only inside contract that defined it
- Internal - only inside contract and child contract
- public - inside and outside contract
- external - only from outside contract

------------------
| A              |
| private pri()  |
| internal int() |    <--- C -pub(), ext()
| public pub()   |
| external ext() |
------------------

------------------
| B is A         |
|  int()         |   <--- C -pub(), ext()
|  pub()         |
------------------

(refer - Visibiility.sol)

## immutable - similar to const but we want to initialize only when the contract is deployed. saves gas too
immutable variables can be initialized only when the contract is deployed and cannot be changed later

    address public owner = msg.sender; // 32816
    address public immutable owner = msg.sender; // 30363

    uint count = 1;

    function addd() public {
        require(msg.sender == owner);
        count++;
    }

## Payable - adds functionality to send and receive Ether

While declaring a global variable like address as payable the keyword should come after the type
address payable public owner;

Use the value field in remix to set the amount of eth to be send to the contract(to the payable function)

## Fallback - Is a special function that gets called when the function that you call does not exist in the contract,
The main usecase of fallback function is to enable direct sending ether(instead to a fn inside the contract)

# receive() - similar to fallback, (but will not be executed if a fn that does not exist in our contract is called)

                Ether is sent to a contract
                            |
                  is msg.data is empty?
                  /                 \
                Yes                 No
                /                     \
     receive() exists?           fallback()
        /        \
       Yes       No
      /             \
   receive()        fallback()

To test it create a fallback and receive fn and emit logs- fallback has msg.data whereas the msg.data para of receive is "" (empty string)

Use the low level interaction section of remix to interact with the contract send 1 eth using the value field in remix
if we transact it with any hexadecimal data (in the low level interaction field) then the triggered fn is fallback()
else its receive() check the debug section for the emitted log details

If receive() does not exist - for both the above cases(with and without msg.data) fallback() is executed

## Send Ether to contract
- 3 ways
    Transfer - 2300 Gas, reverts - sends 2300 gas and if send fails then the fn reverts 
    Send - 2300 Gas, returns bool - similar but returns bool if send is successful or not // not used by popular contracts
    Call - all gas, returns bool and data - sends all gas and returns bool if successful or not and some data // recommended

To make a contract receive eth -

- One way is to pay it when the contract is deployed by having a payable constructor

    constructor() payable {
    }
    Declare a payable constructor and pass the amount of eth to be send in the value field in remix before deploying

    - Another way is to have a payable fallback() better have a payable receive() - so if non existant fns are called then the fn call will fails

To send eth out from a contract (refer - SendEth.sol)

## Ether Wallet (refer - EtherWallet.sol)